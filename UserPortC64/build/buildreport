
; ******** Source: source\user.asm
     1                          
     2                             !convtab pet   ;key in and text out conv to PetSCII throughout
     3                           
     4                             PacketSize = 64
     5                          
     6                             ;Registers:
     7                             PtrAddrLo  = $fb
     8                             PtrAddrHi  = $fc
     9                             LastPage   = $fd
    10                             UserPAIO   = $dd00
    11                             UserPBIO   = $dd01
    12                             UserPADir  = $dd02
    13                             UserPBDir  = $dd03
    14                             UserPICR   = $dd0d
    15                                
    16                             ;Kernal routines:
    17                             SendChar = $ffd2
    18                             ScanKey  = $ff9f ;SCNKEY
    19                             GetIn    = $ffe4 ;GETIN
    20                             
    21                             ;BASIC routines:
    22                             BasicWarmStartVect = $a002
    23                             PrintString =  $ab1e
    24                          
    25                          
    26                          CompType = 3 ;Choose Compile type:  1=BASIC, 2=UPPER, 3=ROMCRT
    27                          
    28                          !if CompType = 1 {
    29                          ; Load into Basic RAM (0801) directly and run from there 
    30                          ; no crunch needed 
    31                          ; 
    32                             BasicStart = $0801
    33                             *=BasicStart
    34                             ;BASIC SYS header
    35                             !byte $0b,$08,$01,$00,$9e  ; Line 1 SYS
    36                             !tx "2064" ;dec address for sys start in text
    37                             !byte $00,$00,$00
    38                             code = 2064 ;$0810
    39                          }
    40                          
    41                          !if CompType = 2 {
    42                          ;Option #2
    43                          ; Load into upper memory, use cruncher to to transfer/call  
    44                          ; SET cruncherArgs=-x$c000 -c64 -g55 -fshort
    45                          ;
    46                             code       = $c000  ;49152
    47                          }
    48                          
    49                          !if CompType = 3 {
    50                          ;Option #3
    51                          ; Store in EEPROM/cartridge
    52                          ; no crunch needed  
    53                          ; SET build=%filename%.bin
    54                          ; SET compilerArgs=-r %buildPath%\%compilerReport% --vicelabels %buildPath%\%compilerSymbols% --msvc --color --format plain -v3 --outfile
    55                          ; burn to eeprom, file won't import to emulator due to 2 missing start addr bytes in file
    56                          ;
    57                          * = $9fff                     ; set a byte to cause fill up to -$9fff (or $bfff if 16K)
    58  9fff 00                    !byte 0
    59                          ;  jump vectors and autostart key     
    60                             CartStart = $8000
    61                             *=CartStart
    62  8000 0980                  !word Coldstart    ; Cartridge cold-start vector   ;!byte $09, $80 = !word $8009
    63  8002 1a80                  !word Warmstart    ; Cartridge warm-start vector
    64  8004 c3c2cd3830            !byte $c3, $c2, $cd, $38, $30    ; CBM8O - Autostart key
    65                          ;  KERNAL RESET ROUTINE
    66                          Coldstart:
    67  8009 78                    sei
    68  800a 8e16d0                stx $d016            ; Turn on VIC for PAL / NTSC check
    69  800d 20a3fd                jsr $fda3            ; IOINIT - Init CIA chips
    70  8010 2050fd                jsr $fd50            ; RANTAM - Clear/test system RAM
    71  8013 2015fd                jsr $fd15            ; RESTOR - Init KERNAL RAM vectors
    72  8016 205bff                jsr $ff5b            ; CINT   - Init VIC and screen editor
    73  8019 58                    cli                  ; Re-enable IRQ interrupts
    74                          ;  BASIC RESET  Routine
    75                          Warmstart:
    76  801a 2053e4                jsr $e453            ; Init BASIC RAM vectors
    77  801d 20bfe3                jsr $e3bf            ; Main BASIC RAM Init routine
    78  8020 2022e4                jsr $e422            ; Power-up message / NEW command
    79  8023 a2fb                  ldx #$fb
    80  8025 9a                    txs                  ; Reduce stack pointer for BASIC
    81                             code       = *
    82                          }
    83                             
    84                          
    85                          ;******************************* Real Code Start ************************************   
    86                             *=code  ; Start location for code
    87                             
    88                          ;   Setup stuff:
    89                             ;sei
    90  8026 a900                  lda #$00
    91  8028 8d03dd                sta UserPBDir  ;set all of PB as inputs
    92                             
    93  802b ad02dd                lda UserPADir
    94  802e 0904                  ora #%00000100 ;set bit 2
    95  8030 8d02dd                sta UserPADir  ;set PA.2 as output
    96  8033 ad00dd                lda UserPAIO   
    97  8036 29fb                  and #%11111011 ;clear bit 2 (not ready)
    98  8038 8d00dd                sta UserPAIO   ;set ready output low
    99                            
   100  803b a958                  lda #<MsgWelcome
   101  803d a081                  ldy #>MsgWelcome
   102  803f 201eab                jsr PrintString  
   103                             
   104                          ;   *********  Keyboard option list/input wait   ***********
   105                          KbdOptions:
   106  8042 a9a3                  lda #<MsgOptions
   107  8044 a081                  ldy #>MsgOptions
   108  8046 201eab                jsr PrintString
   109                          
   110                          WaitForKey:     ;"rEceive, Run, Save, Disp, or Quit..."
   111  8049 209fff                jsr ScanKey  ; (since interrupts are disabled)
   112  804c 20e4ff                jsr GetIn    ;
   113  804f f0f8                  beq WaitForKey
   114                          
   115  8051 c945                  cmp #'e'     ;rEceive
   116  8053 f046                  beq ReceiveFile
   117                             
   118  8055 c952                  cmp #'r'   ;load keyboard buffer with "RUN\n" and exit to BASIC
   119  8057 d01b                  bne notR
   120                             ;load keyboard buffer with "run\n":  
   121  8059 a952                  lda #'r'
   122  805b 8d7702                sta $0277  ;kbd buff 0
   123  805e a955                  lda #'u'
   124  8060 8d7802                sta $0278 ;kbd buff 1
   125  8063 a94e                  lda #'n'
   126  8065 8d7902                sta $0279  ;kbd buff 2
   127  8068 a90d                  lda #13
   128  806a 8d7a02                sta $027a  ;kbd buff 3
   129  806d a904                  lda #4
   130  806f 85c6                  sta $C6  ;# chars in kbd buff (10 max)
   131  8071 6c02a0                jmp (BasicWarmStartVect)
   132                          notR:
   133                          
   134  8074 c951                  cmp #'q'  ;quit to BASIC
   135  8076 d003                  bne notQ
   136  8078 6c02a0                jmp (BasicWarmStartVect) 
   137                          notQ:
   138                          
   139  807b c944                  cmp #'d'  ;display start of receved data
   140  807d d015                  bne notD
   141  807f a000                  ldy #$00   ;index
   142                          DispLoop:     ;first 100 bytes from $0801
   143  8081 b90108                lda $0801, y
   144  8084 202681                jsr PrintHexByte
   145  8087 c8                    iny
   146  8088 c064                  cpy #100
   147  808a d0f5                  bne DispLoop
   148  808c a90d                  lda #13
   149  808e 20d2ff                jsr SendChar
   150  8091 4c4280                jmp KbdOptions
   151                          notD:
   152                          
   153  8094 c953                  cmp #'s'  ;save file to disk
   154  8096 d000                  bne notS
   155                             ;save not yet implemented...
   156                             
   157                          notS:
   158                          
   159  8098 4c4280                jmp KbdOptions   ; try again...  
   160                             
   161                          
   162                          ReceiveFile:  ;******************  Receive File from host **************************
   163  809b a975                  lda #<MsgWaiting
   164  809d a081                  ldy #>MsgWaiting
   165  809f 201eab                jsr PrintString   ;display waiting message
   166                             
   167  80a2 200b81                jsr ReceiveByte
   168  80a5 c9b9                  cmp #$B9  ;magic number to start
   169  80a7 f005                  beq cont1
   170  80a9 a901                  lda #$01  ;unexpected start byte
   171  80ab 4cf780                jmp ErrOut
   172                          cont1:   
   173                             
   174  80ae a98a                  lda #<MsgReceiving
   175  80b0 a081                  ldy #>MsgReceiving
   176  80b2 201eab                jsr PrintString   ;display receiving message
   177                             
   178  80b5 200b81                jsr ReceiveByte  ;size in 256 byte pages
   179  80b8 85fd                  sta LastPage     ;store last page hi addr
   180                            
   181  80ba 200b81                jsr ReceiveByte
   182  80bd 85fb                  sta PtrAddrLo
   183  80bf c901                  cmp #$01  ;StartAddr Low, verifying $0801
   184  80c1 f005                  beq cont2
   185  80c3 a902                  lda #$02  ;StartAddr Low
   186  80c5 4cf780                jmp ErrOut
   187                          cont2: 
   188                            
   189  80c8 200b81                jsr ReceiveByte
   190  80cb 85fc                  sta PtrAddrHi
   191  80cd c908                  cmp #$08  ;StartAddr High, verifying $0801
   192  80cf f005                  beq cont3
   193  80d1 a903                  lda #$03  ;StartAddr High
   194  80d3 4cf780                jmp ErrOut
   195                          cont3:   
   196                          
   197  80d6 18                    clc
   198  80d7 65fd                  adc LastPage     ;add start address page to size 
   199  80d9 85fd                  sta LastPage     ;store last page hi addr
   200                          
   201  80db a000                  ldy #$00       ;reset packet index
   202                          ReadyNext:
   203  80dd 200b81                jsr ReceiveByte
   204  80e0 91fb                  sta (PtrAddrLo), y   ;save byte in mem
   205  80e2 c8                    iny
   206  80e3 d0f8                  bne ReadyNext
   207                             
   208  80e5 e6fc                  inc PtrAddrHi
   209  80e7 a5fc                  lda PtrAddrHi
   210  80e9 c5fd                  cmp LastPage
   211  80eb d0f0                  bne ReadyNext
   212                             
   213  80ed a998                  lda #<MsgFinished
   214  80ef a081                  ldy #>MsgFinished
   215  80f1 201eab                jsr PrintString
   216                             
   217  80f4 4c4280                jmp KbdOptions
   218                          
   219                             
   220                          ErrOut:   
   221                             ;ErrNum stored in acc
   222  80f7 48                    pha
   223  80f8 a950                  lda #<MsgError
   224  80fa a081                  ldy #>MsgError
   225  80fc 201eab                jsr PrintString   
   226  80ff 68                    pla
   227  8100 202681                jsr PrintHexByte
   228  8103 a90d                  lda #13
   229  8105 20d2ff                jsr SendChar
   230  8108 4c4280                jmp KbdOptions
   231                           
   232                           
   233                           
   234                          ;   *********************** Subroutines *********************** 
   235                           
   236                          ReceiveByte:
   237                             ;Receives one byte from parallel port, then back to not ready
   238                             ;returns value in acc
   239                             ; X and Y not touched
   240  810b ad00dd                lda UserPAIO   
   241  810e 0904                  ora #%00000100 ;set bit 2 (ready)
   242  8110 8d00dd                sta UserPAIO   ;set ready output high
   243                          
   244  8113 a910                  lda #%00010000 ;mask bit 4 (Flag pin)
   245                          lpForFlag:        ;wait for high to low transition on Flag2 pin
   246  8115 2c0ddd                bit UserPICR   ;self clearing on read
   247  8118 f0fb                  beq lpForFlag
   248                          
   249  811a ad00dd                lda UserPAIO   
   250  811d 29fb                  and #%11111011 ;clear bit 2 (not ready)
   251  811f 8d00dd                sta UserPAIO   ;set ready output low
   252                             
   253  8122 ad01dd                lda UserPBIO  ;grab byte
   254  8125 60                    rts
   255                           
   256                          PrintHexByte:
   257                             ;Print byte value stored in acc in hex
   258                             ;  2 chars plus 2 spaces
   259                             ;trashes acc
   260  8126 48                    pha
   261  8127 6a                    ror
   262  8128 6a                    ror
   263  8129 6a                    ror
   264  812a 6a                    ror
   265  812b 203d81                jsr PrintHexNibble
   266  812e 68                    pla
   267  812f 203d81                jsr PrintHexNibble
   268  8132 a920                  lda #' '
   269  8134 20d2ff                jsr SendChar
   270  8137 a920                  lda #' '
   271  8139 20d2ff                jsr SendChar
   272  813c 60                    rts
   273                             
   274                          PrintHexNibble:   
   275                             ;Print value stored in lower nible acc in hex
   276                             ;trashes acc
   277  813d 290f                  and #$0f
   278  813f c90a                  cmp #$0a
   279  8141 1006                  bpl letter 
   280  8143 18                    clc
   281  8144 6930                  adc #'0'
   282  8146 4c4c81                jmp printret
   283                          letter:
   284  8149 18                    clc
   285  814a 6937                  adc #'a'-$0a
   286                          printret:
   287  814c 20d2ff                jsr SendChar
   288  814f 60                    rts
   289                           
   290                          ;   *********************** Strings/Messages *********************** 
   291                          
   292                          MsgError:
   293  8150 c552524f52202300      !tx "Error #", 0
   294                          MsgWelcome:       ;clr screen, wht char, lower case
   295  8158 050ed45241562753...   !tx 5, 14, "Trav's para-user app 0.04", 13, 0
   296                             ;!tx 147, 5, 14, "Trav's para-user app 0.03", 13, 0
   297                          MsgWaiting:
   298  8175 d7414954494e4720...   !tx "Waiting for host...", 13, 0
   299                          MsgReceiving:
   300  818a d24543454956494e...   !tx "Receiving...", 13, 0
   301                          MsgFinished:
   302  8198 c6494e4953484544...   !tx "Finished!", 13, 0
   303                          MsgOptions:
   304  81a3 0d52c54345495645...   !tx 13, "rEceive, Run, Save, Disp, or Quit...", 13, 0
   305                             
   306                             
